@namespace BlazorBeerCss
@using Extensions;
@using Helpers;
<label class="checkbox @DisplayAsIcon()">
    <input type="checkbox" disabled="@Disabled" checked="@IsChecked" @onchange="CheckboxChanged">
    <span>
        @if (Icons != null)
        {
            <i>@Icons?.Item1</i>
            <i>@Icons?.Item2</i>
        }
        else
        {
            @ChildContent
        }
    </span>
</label>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public Tuple<Icon, Icon>? Icons { get; set; } = null;
    [Parameter]
    public bool IsChecked { get; set; } = false;

    // Internal field holding checkbox state
    private bool isChecked;

    [Parameter] public EventCallback<bool> IsCheckedChanged { get; set; }
    // updates the internal value whwenever the component is updated
    // You may not want that??
    protected override void OnParametersSet()
    {
        isChecked = this.IsChecked;
    }

    private void CheckboxChanged(ChangeEventArgs e)
    {
        var value = e.Value;
        if (e.Value != null)
        {
            var result = (bool)e.Value;
            IsCheckedChanged.InvokeAsync((bool)e.Value);
            Console.WriteLine($"Checkbox changed {value}");
        }

    }

    private string DisplayAsIcon()
    {
        @if (Icons != null)
            return "icon";

        return "";
    }
}